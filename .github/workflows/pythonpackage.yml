name: build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # runs-on: macos-latest
    strategy:
      matrix:
        #python-version: [3.5, 3.6, 3.7, 3.8]
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies (Linux)
      run: |
          pwd
          cd $HOME
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          chmod +x miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"
          sudo apt-get update
          sudo apt-get -y install libgl1-mesa-glx
          sudo apt-get -y install libsm6 libxrender1 libfontconfig1 libxcomposite-dev libxcursor1 libxi6 libxtst6 libxss1 libxrandr2 libasound2 libegl1
          sudo apt-get -y install xvfb
          $HOME/miniconda/bin/conda install xarray numpy scipy pyopengl pytest flake8 six coverage bokeh pyqtgraph matplotlib --yes
          $HOME/miniconda/bin/conda install pyqt --yes
          $HOME/miniconda/bin/conda install -c anaconda netcdf4 --yes
          $HOME/miniconda/bin/conda install -c mavensdc cdflib --yes
          $HOME/miniconda/bin/conda install keyring --yes
          python -m pip install --upgrade pip
          # pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'ubuntu-latest'
    - name: Install dependencies (Windows)
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'windows-latest'
    - name: Install dependencies (macOS)
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'macos-latest'
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. 
        flake8 . --count --exit-zero --max-complexity=10 --statistics # --max-line-length=127
    - name: Test with unittest
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coverage run -a -m pyspedas.mms.tests.load_routine_tests
        coverage run -a -m pyspedas.mms.tests.feeps
        coverage run -a -m pyspedas.mms.tests.eis
        coverage run -a -m pyspedas.mms.tests.file_filter
        coverage run -a -m pyspedas.dscovr.tests.tests
        coverage run -a -m pyspedas.utilities.tests.download_tests
        coverage run -a -m pyspedas.utilities.tests.misc_tests
        coverage run -a -m pyspedas.cluster.tests.tests
        coverage run -a -m pyspedas.csswe.tests.tests
        coverage run -a -m pyspedas.ace.tests.tests
        coverage run -a -m pyspedas.equator_s.tests.tests
        coverage run -a -m pyspedas.image.tests.tests
        coverage run -a -m pyspedas.psp.tests.tests
        coverage run -a -m pyspedas.rbsp.tests.tests
        coverage run -a -m pyspedas.stereo.tests.tests
        coverage run -a -m pyspedas.twins.tests.tests
        coverage run -a -m pyspedas.wind.tests.tests
        coverage run -a -m pyspedas.mms.tests.curlometer
        coverage run -a -m pyspedas.poes.tests.tests
        coverage run -a -m pyspedas.polar.tests.tests
        coverage run -a -m pyspedas.geotail.tests.tests
        coverage run -a -m pyspedas.analysis.tests.tests
        coverage run -a -m pyspedas.fast.tests.tests
        coverage run -a -m pyspedas.omni.tests.tests
        coverage run -a -m pyspedas.themis.tests.tests
        coverage run -a -m pyspedas.maven.tests.tests
        coverage run -a -m pyspedas.goes.tests.tests
        coverage run -a -m pyspedas.mica.tests.tests
        # coverage run -a -m pyspedas.examples.tests.tests
        coveralls
